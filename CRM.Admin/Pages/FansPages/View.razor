@page "/fans/view/{id}"

<MudGrid>
    <MudItem xs="3"></MudItem>
    <MudItem xs="6">
        <MudCard Class="mt-4">
            <MudCardContent>
                <MudStack Direction="Direction.Horizontal">
                    <h6>Fan Nomi</h6>
                    <MudTextField style="color: black" Value="@fan.FanName" Disabled="true" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <h6 style="color: black">Fan Descriptioni</h6>
                    <MudTextField style="color: black" Value="@fan.FanDescription" Disabled="true" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTh Class="text-center"><h5 style="color: black">Teachers</h5></MudTh>
                </MudStack>

                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th scope="col" class="text-center">First Name</th>
                                <th scope="col" class="text-center">Last Name</th>
                                <th scope="col" class="text-center">Email</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var teacher in fan.Teachers)
                            {
                                <tr>
                                    <td class="text-center">@teacher.FirstName</td>
                                    <td class="text-center">@teacher.LastName</td>
                                    <td class="text-center">@teacher.Email</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </MudCardContent>

            <MudCardActions Class="d-flex justify-center">
                <div class="d-flex justify-content-between" style="width: 50%;">
                    <div>
                        <MudButton @onclick="Cancel" Variant="Variant.Filled" Color="Color.Primary">GoBack</MudButton>
                    </div>
                    <div>
                        <MudButton @onclick="DeleteFan" Variant="Variant.Filled" Color="Color.Secondary">Delete</MudButton>
                    </div>
                </div>
            </MudCardActions>




        </MudCard>
    </MudItem>
    <MudItem xs="3"></MudItem>
</MudGrid>


@code {
@inject NavigationManager navigation
    @inject HttpClient httpClient
    @inject ISnackbar Snackbar
    @inject IDialogService DialogService

    FanTeachersDto fan = new();

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadFanData();
    }

    private async Task LoadFanData()
    {
        var response = await httpClient.GetAsync(Constants.BASE_URL + "fans/get-by-id-fan-with-teachers/" + Id);
        if (response.IsSuccessStatusCode)
        {
            fan = await response.Content.ReadFromJsonAsync<FanTeachersDto?>();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            Snackbar.Add("Fan not found!", Severity.Error);
            navigation.NavigateTo("/fans");
        }
        else
        {
            string errorContent = await response.Content.ReadAsStringAsync();
            Snackbar.Add(errorContent, Severity.Error);
            navigation.NavigateTo("/fans");
        }
    }

    private void Cancel()
    {
        navigation.NavigateTo("/fans");
    }

    private async Task DeleteFan()
    {
        var parameters = new DialogParameters<YesNo>();
        parameters.Add(x => x.ContentText, "Are you sure you want to delete this fan?");
        parameters.Add(x => x.ButtonText, "Yes");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<YesNo>("Delete", parameters, options).Result;
        if (dialogResult.Cancelled)
        {
            return; // Do nothing if deletion is cancelled
        }

        var response = await httpClient.DeleteAsync($"{Constants.BASE_URL}fans/delete-fan/{fan.Id}");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Fan deleted successfully!", Severity.Success);
            navigation.NavigateTo("/fans");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            Snackbar.Add("Fan not found!", Severity.Error);
        }
        else
        {
            Snackbar.Add("Something went wrong!", Severity.Error);
        }
    }
}
