@page "/fans/view"

<MudTable Items="@fans" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<FanTeachersDto, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Fans Table</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudButton @onclick="OpenAddPage" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" Size="Size.Medium">Add</MudButton>
    </ToolBarContent>
    <HeaderContent>
       
        <MudTh>FanName</MudTh>
        <MudTh>FanDescription</MudTh>
        <MudTh>Teachers</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FanName">@context.FanName</MudTd>
        <MudTd DataLabel="FanDescription">@context.FanDescription</MudTd>
        <MudTd DataLabel="Teachers">
            @foreach (var teacher in @context.Teachers)
            {
                <div>
                    <strong>@teacher.FirstName @teacher.LastName</strong>
                    <br />
                    <span>Email: @teacher.Email</span>
                </div>
            }
        </MudTd>

        <MudTd DataLabel="Actions">
            <div style="display: flex; gap: 1rem;">
                <MudIconButton @onclick="() => OpenEditPage(context.Id)" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
                <MudIconButton @onclick="() => Delete(context.Id)" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />
            </div>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    @inject HttpClient httpClient
    @inject NavigationManager navigation
    @inject ISnackbar Snackbar
    @inject IDialogService DialogService

    private string searchString1 = "";
    private FanTeachersDto selectedItem1 = new();
    private List<FanTeachersDto> fans = new();

    protected override async Task OnInitializedAsync()
    {
        await View1(); // Call View method to load data
    }

    private async Task View1()
    {
        var response = await httpClient.GetAsync(Constants.BASE_URL + "fans/get-all-with-teachers");
        if (response.IsSuccessStatusCode)
        {
            fans = await response.Content.ReadFromJsonAsync<List<FanTeachersDto>>();
        }
    }

    private bool FilterFunc1(FanTeachersDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(FanTeachersDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.FanName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.FanDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void OpenAddPage()
    {
        navigation.NavigateTo("/fans/add");
    }

    private void OpenEditPage(string id)
    {
        navigation.NavigateTo($"/fans/edit/{id}");
    }

    private async Task Delete(string id)
    {
        var parameters = new DialogParameters<YesNo>();
        parameters.Add(x => x.ContentText, "Are you sure you want to delete this fan?");
        parameters.Add(x => x.ButtonText, "Yes");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = await DialogService.Show<YesNo>("Delete", parameters, options).Result!;
        if (!dialogResult.Cancelled)
        {
            var response = await httpClient.DeleteAsync(Constants.BASE_URL + "fans/delete-fan/" + id);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Fan deleted successfully!", Severity.Success);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Fan not found!", Severity.Error);
            }
            else
            {
                Snackbar.Add("Something went wrong!", Severity.Error);
            }
        }
    }
}
